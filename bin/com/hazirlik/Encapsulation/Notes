Introduction to Encapsulation
Encapsulation refers to wrapping up of data under a single unit. It is the mechanism that binds code
and the data it manipulates. Another way to think about encapsulation is, it is a protective shield
that prevents the data from being accessed by the code outside this shield. In this,
the variables or data of a class is hidden from any other class and can be accessed
only through any member function of own class in which they are declared.

Now, letâ€™s take the example of a medical capsule, where the drug is always safe inside the capsule.
Similarly, through encapsulation, the methods and variables of a class are well hidden and safe.

Encapsulation in Java can be achieved by:

Declaring the variables of a class as private.
Providing public setter and getter methods to modify and view the variables values.

Why we need Encapsulation in Java?
Encapsulation is essential in Java because:

It controls the way of data accessibility
Modifies the code based on the requisites
Helps us to achieve a loose couple
Achieves simplicity of our application
It also allows you to change the part of the code without disrupting any other functions
or code present in the program

Benefits of Encapsulation
Data Hiding: Here, a user will have no idea about the inner implementation of the class.
Even user will not be aware of how the class is storing values in the variables.
He/she will only be aware that we are passing the values to a setter method and variables
are getting initialized with that value.
Increased Flexibility: Here, we can make the variables of the class as read-only or
write-only depending on our requirement. In case you wish to make the variables as read-only
then we have to omit the setter methods like setName(), setAge() etc. or if we wish to make the
variables as write-only then we have to omit the get methods like getName(), getAge() etc. from the above program.
Reusability: It also improves the re-usability and easy to change with new requirements.